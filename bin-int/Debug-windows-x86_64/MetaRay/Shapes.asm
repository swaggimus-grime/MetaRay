; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30040.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__02E23235_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__80A05712_cstdlib DB 01H
__6D66DEAE_cmath DB 01H
__D1154D4E_type_traits DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__44860E64_limits DB 01H
__8AF6250F_func_common@inl DB 01H
__D2FE3C91_type_half@inl DB 01H
__F4C89D2A_func_packing@inl DB 01H
__20BB4341_malloc@h DB 01H
__9FAB920F_func_integer@inl DB 01H
__BDCC0984_vcruntime_exception@h DB 01H
__89F7010A_exception DB 01H
__A751F051_corecrt_memory@h DB 01H
__32E5F013_string@h DB 01H
__7CE971A6_xutility DB 01H
__DD38B15A_xmemory DB 01H
__633B43DE_algorithm DB 01H
__317CA204_xbit_ops@h DB 01H
__A9EB37C6_xstring DB 01H
__047EEC0A_random DB 01H
__DD86A519_RandomUtil@h DB 01H
__F03674A5_Vec3@h DB 01H
__32677E70_Ray@h DB 01H
__65F43743_vcruntime_typeinfo@h DB 01H
__0C3682BF_typeinfo DB 01H
__F82802EA_memory DB 01H
__F6517A76_Hittable@h DB 01H
__EBBC9262_Shapes@h DB 01H
__3AA5F7DA_Shapes@cpp DB 01H
__092B7E84_vector DB 01H
__B7ADD299_utility DB 01H
__FC0515E5_type_vec4@inl DB 01H
__7345E045_type_vec2@inl DB 01H
__B2C7E9E2_type_vec2@hpp DB 01H
__3D871C42_type_vec4@hpp DB 01H
__68421003_func_geometric@inl DB 01H
__4E25C9F5_type_vec3@inl DB 01H
__40B2458B_xstddef DB 01H
__C2238C2F__vectorize@hpp DB 01H
__8FA7C052_type_vec3@hpp DB 01H
__C6245A35_func_exponential@inl DB 01H
msvcjmc	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z		; glm::vec<3,float,0>::vec<3,float,0>
PUBLIC	??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z	; vec3::vec3
PUBLIC	?len@vec3@@QEBAMXZ				; vec3::len
PUBLIC	?lensqr@vec3@@QEBAMXZ				; vec3::lensqr
PUBLIC	?dot@vec3@@QEBAMAEBV1@@Z			; vec3::dot
PUBLIC	??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z ; glm::length<3,float,0>
PUBLIC	??$pow@MH$0A@@@YANMH@Z				; pow<float,int,0>
PUBLIC	??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z ; glm::dot<3,float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
PUBLIC	??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
PUBLIC	?at@ray@@QEBA?AVvec3@@M@Z			; ray::at
PUBLIC	?_Incref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Incref
PUBLIC	?_Decref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decref
PUBLIC	?_Decwref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decwref
PUBLIC	??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ		; std::_Ptr_base<Material>::_Ptr_base<Material>
PUBLIC	?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ	; std::_Ptr_base<Material>::_Incref
PUBLIC	?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ	; std::_Ptr_base<Material>::_Decref
PUBLIC	?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<Material>::_Swap
PUBLIC	??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z	; std::shared_ptr<Material>::shared_ptr<Material>
PUBLIC	??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ	; std::shared_ptr<Material>::~shared_ptr<Material>
PUBLIC	??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z ; std::shared_ptr<Material>::operator=
PUBLIC	?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<Material>::swap
PUBLIC	?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z ; hit_record::set_face_normal
PUBLIC	??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z	; glm::operator-<float,0>
PUBLIC	??0Hittable@@QEAA@XZ				; Hittable::Hittable
PUBLIC	??0Sphere@@QEAA@AEBVvec3@@MV?$shared_ptr@VMaterial@@@std@@@Z ; Sphere::Sphere
PUBLIC	?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z ; Sphere::hit
PUBLIC	??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
PUBLIC	??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z ; std::_Ptr_base<Material>::_Copy_construct_from<Material>
PUBLIC	??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z ; std::swap<Material *,0>
PUBLIC	??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,0>
PUBLIC	?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z ; glm::detail::compute_length<3,float,0,0>::call
PUBLIC	?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
PUBLIC	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
PUBLIC	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>
PUBLIC	__JustMyCode_Default
PUBLIC	??_7Hittable@@6B@				; Hittable::`vftable'
PUBLIC	??_7Sphere@@6B@					; Sphere::`vftable'
PUBLIC	??_R4Hittable@@6B@				; Hittable::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVHittable@@@8				; Hittable `RTTI Type Descriptor'
PUBLIC	??_R3Hittable@@8				; Hittable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Hittable@@8				; Hittable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Hittable@@8			; Hittable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Sphere@@6B@				; Sphere::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSphere@@@8				; Sphere `RTTI Type Descriptor'
PUBLIC	??_R3Sphere@@8					; Sphere::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Sphere@@8					; Sphere::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Sphere@@8				; Sphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_purecall:PROC
EXTRN	pow:PROC
EXTRN	sqrtf:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sqrt@@YAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?sqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?len@vec3@@QEBAMXZ DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?len@vec3@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lensqr@vec3@@QEBAMXZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?lensqr@vec3@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dot@vec3@@QEBAMAEBV1@@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$?dot@vec3@@QEBAMAEBV1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$pow@MH$0A@@@YANMH@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$??$pow@MH$0A@@@YANMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?at@ray@@QEBA?AVvec3@@M@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$?at@ray@@QEBA?AVvec3@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Incref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?_Incref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z DD imagerel $LN7
	DD	imagerel $LN7+295
	DD	imagerel $unwind$?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Hittable@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0Hittable@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Sphere@@QEAA@AEBVvec3@@MV?$shared_ptr@VMaterial@@@std@@@Z DD imagerel $LN5
	DD	imagerel $LN5+178
	DD	imagerel $unwind$??0Sphere@@QEAA@AEBVvec3@@MV?$shared_ptr@VMaterial@@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z DD imagerel $LN8
	DD	imagerel $LN8+691
	DD	imagerel $unwind$?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@Sphere@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Sphere@@8 DD imagerel ??_R0?AVSphere@@@8	; Sphere::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R2Sphere@@8
rdata$r	SEGMENT
??_R2Sphere@@8 DD imagerel ??_R1A@?0A@EA@Sphere@@8	; Sphere::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Hittable@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Sphere@@8
rdata$r	SEGMENT
??_R3Sphere@@8 DD 00H					; Sphere::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Sphere@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSphere@@@8
data$rs	SEGMENT
??_R0?AVSphere@@@8 DQ FLAT:??_7type_info@@6B@		; Sphere `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVSphere@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Sphere@@6B@
rdata$r	SEGMENT
??_R4Sphere@@6B@ DD 01H					; Sphere::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVSphere@@@8
	DD	imagerel ??_R3Sphere@@8
	DD	imagerel ??_R4Sphere@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Hittable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Hittable@@8 DD imagerel ??_R0?AVHittable@@@8 ; Hittable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Hittable@@8
rdata$r	ENDS
;	COMDAT ??_R2Hittable@@8
rdata$r	SEGMENT
??_R2Hittable@@8 DD imagerel ??_R1A@?0A@EA@Hittable@@8	; Hittable::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Hittable@@8
rdata$r	SEGMENT
??_R3Hittable@@8 DD 00H					; Hittable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Hittable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVHittable@@@8
data$rs	SEGMENT
??_R0?AVHittable@@@8 DQ FLAT:??_7type_info@@6B@		; Hittable `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVHittable@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Hittable@@6B@
rdata$r	SEGMENT
??_R4Hittable@@6B@ DD 01H				; Hittable::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVHittable@@@8
	DD	imagerel ??_R3Hittable@@8
	DD	imagerel ??_R4Hittable@@6B@
rdata$r	ENDS
;	COMDAT ??_7Sphere@@6B@
CONST	SEGMENT
??_7Sphere@@6B@ DQ FLAT:??_R4Sphere@@6B@		; Sphere::`vftable'
	DQ	FLAT:?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
CONST	ENDS
;	COMDAT ??_7Hittable@@6B@
CONST	SEGMENT
??_7Hittable@@6B@ DQ FLAT:??_R4Hittable@@6B@		; Hittable::`vftable'
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z DD 025051d01H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z DD 035053101H
	DD	01133318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z$rtcName$0 DB 074H ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
	DB	06dH
	DB	070H
	DB	00H
	ORG $+12
?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z$rtcVarDesc DD 038H ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
	DD	0cH
	DQ	FLAT:?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z$rtcName$0
	ORG $+48
?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z$rtcFrameData DD 01H ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
	DD	00H
	DQ	FLAT:?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z DD 035051301H
	DD	010e3313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD 025053101H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0 DB 05fH ; std::swap<std::_Ref_count_base *,0>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc DD 028H ; std::swap<std::_Ref_count_base *,0>
	DD	08H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0
	ORG $+48
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData DD 01H ; std::swap<std::_Ref_count_base *,0>
	DD	00H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z DD 025053101H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcName$0 DB 05fH ; std::swap<Material *,0>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcVarDesc DD 028H ; std::swap<Material *,0>
	DD	08H
	DQ	FLAT:??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcName$0
	ORG $+48
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcFrameData DD 01H ; std::swap<Material *,0>
	DD	00H
	DQ	FLAT:??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z DD 025051e01H
	DD	0119231eH
	DD	07012001fH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z DD 025063e01H
	DD	01202325H
	DD	070190050H
	DD	050176018H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcName$0 DB 06fH ; Sphere::hit
	DB	063H
	DB	00H
	ORG $+5
?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcName$1 DB 06fH ; Sphere::hit
	DB	075H
	DB	074H
	DB	077H
	DB	061H
	DB	072H
	DB	064H
	DB	05fH
	DB	06eH
	DB	06fH
	DB	072H
	DB	06dH
	DB	061H
	DB	06cH
	DB	00H
	ORG $+9
?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcVarDesc DD 0118H ; Sphere::hit
	DD	0cH
	DQ	FLAT:?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcName$1
	DD	028H
	DD	0cH
	DQ	FLAT:?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcName$0
	ORG $+96
?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcFrameData DD 02H ; Sphere::hit
	DD	00H
	DQ	FLAT:?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Sphere@@QEAA@AEBVvec3@@MV?$shared_ptr@VMaterial@@@std@@@Z DD 025062401H
	DD	011f2324H
	DD	07018001cH
	DD	050166017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Hittable@@QEAA@XZ DD 05051101H
	DD	010e0311H
	DD	070070019H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z DD 025061e01H
	DD	0119231eH
	DD	070120030H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Incref@_Ref_count_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?at@ray@@QEBA?AVvec3@@M@Z DD 025051e01H
	DD	0119231eH
	DD	070120025H
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z DD 025051d01H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z DD 025051d01H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z DD 025051e01H
	DD	0119231eH
	DD	07012001fH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z DD 035051801H
	DD	01133318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$pow@MH$0A@@@YANMH@Z DD 035051801H
	DD	01133318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z DD 035051301H
	DD	010e3313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dot@vec3@@QEBAMAEBV1@@Z DD 035061901H
	DD	01143319H
	DD	0700d0022H
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lensqr@vec3@@QEBAMXZ DD 035051301H
	DD	010e3313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?len@vec3@@QEBAMXZ DD 035061401H
	DD	010f3314H
	DD	070080022H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z DD 025052501H
	DD	01202325H
	DD	07019001dH
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sqrt@@YAMM@Z DD 035051401H
	DD	010f3314H
	DD	07008001fH
	DD	05007H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 192
__$ReturnUdt$ = 240
v1$ = 248
v2$ = 256
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 709  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4E25C9F5_type_vec3@inl
	call	__CheckForDebuggerJustMyCode

; 710  : 		return vec<3, T, Q>(

	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rbp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rbp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]

; 711  : 			v1.x * v2.x,
; 712  : 			v1.y * v2.y,
; 713  : 			v1.z * v2.z);
; 714  : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z PROC ; std::move<std::_Ref_count_base * &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D1154D4E_type_traits
	call	__CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rbp]

; 1457 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ENDP ; std::move<std::_Ref_count_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z PROC ; std::move<Material * &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D1154D4E_type_traits
	call	__CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rbp]

; 1457 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ENDP ; std::move<Material * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z
_TEXT	SEGMENT
tmp$ = 8
a$ = 272
b$ = 280
?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call, COMDAT

; 51   : 		{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	lea	rcx, OFFSET FLAT:__68421003_func_geometric@inl
	call	__CheckForDebuggerJustMyCode

; 52   : 			vec<3, T, Q> tmp(a * b);

	mov	r8, QWORD PTR b$[rbp]
	mov	rdx, QWORD PTR a$[rbp]
	lea	rcx, QWORD PTR tmp$[rbp]
	call	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ; glm::operator*<float,0>

; 53   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR tmp$[rbp]
	addss	xmm0, DWORD PTR tmp$[rbp+4]
	addss	xmm0, DWORD PTR tmp$[rbp+8]

; 54   : 		}

	movdqu	XMMWORD PTR [rsp+32], xmm0
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z
_TEXT	SEGMENT
v$ = 224
?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z PROC ; glm::detail::compute_length<3,float,0,0>::call, COMDAT

; 11   : 		{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__68421003_func_geometric@inl
	call	__CheckForDebuggerJustMyCode

; 12   : 			return sqrt(dot(v, v));

	mov	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z ; glm::dot<3,float,0>
	call	?sqrt@@YAMM@Z				; sqrt

; 13   : 		}

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z ENDP ; glm::detail::compute_length<3,float,0,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
_TEXT	SEGMENT
_Tmp$ = 8
_Left$ = 256
_Right$ = 264
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z PROC ; std::swap<std::_Ref_count_base *,0>, COMDAT

; 103  :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 10
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__B7ADD299_utility
	call	__CheckForDebuggerJustMyCode

; 104  :     _Ty _Tmp = _STD move(_Left);

	mov	rcx, QWORD PTR _Left$[rbp]
	call	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Tmp$[rbp], rax

; 105  :     _Left    = _STD move(_Right);

	mov	rcx, QWORD PTR _Right$[rbp]
	call	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
	mov	rcx, QWORD PTR _Left$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 106  :     _Right   = _STD move(_Tmp);

	lea	rcx, QWORD PTR _Tmp$[rbp]
	call	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
	mov	rcx, QWORD PTR _Right$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 107  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ENDP ; std::swap<std::_Ref_count_base *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z
_TEXT	SEGMENT
_Tmp$ = 8
_Left$ = 256
_Right$ = 264
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z PROC ; std::swap<Material *,0>, COMDAT

; 103  :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 10
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__B7ADD299_utility
	call	__CheckForDebuggerJustMyCode

; 104  :     _Ty _Tmp = _STD move(_Left);

	mov	rcx, QWORD PTR _Left$[rbp]
	call	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Tmp$[rbp], rax

; 105  :     _Left    = _STD move(_Right);

	mov	rcx, QWORD PTR _Right$[rbp]
	call	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
	mov	rcx, QWORD PTR _Left$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 106  :     _Right   = _STD move(_Tmp);

	lea	rcx, QWORD PTR _Tmp$[rbp]
	call	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
	mov	rcx, QWORD PTR _Right$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 107  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z ENDP ; std::swap<Material *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z PROC ; std::_Ptr_base<Material>::_Copy_construct_from<Material>, COMDAT

; 1289 :     void _Copy_construct_from(const shared_ptr<_Ty2>& _Other) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1290 :         // implement shared_ptr's (converting) copy ctor
; 1291 :         _Other._Incref();

	mov	rcx, QWORD PTR _Other$[rbp]
	call	?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ ; std::_Ptr_base<Material>::_Incref

; 1292 : 
; 1293 :         _Ptr = _Other._Ptr;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1294 :         _Rep = _Other._Rep;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 1295 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z ENDP ; std::_Ptr_base<Material>::_Copy_construct_from<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z
_TEXT	SEGMENT
tv73 = 192
__$ReturnUdt$ = 240
v$ = 248
scalar$ = 256
??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z PROC	; glm::operator/<float,0>, COMDAT

; 718  : 	{

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4E25C9F5_type_vec3@inl
	call	__CheckForDebuggerJustMyCode

; 719  : 		return vec<3, T, Q>(

	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR scalar$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	divss	xmm1, DWORD PTR scalar$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR [rax]
	divss	xmm2, DWORD PTR scalar$[rbp]
	movss	DWORD PTR tv73[rbp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rbp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]

; 720  : 			v.x / scalar,
; 721  : 			v.y / scalar,
; 722  : 			v.z / scalar);
; 723  : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z ENDP	; glm::operator/<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Shapes.cpp
;	COMDAT ?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
_TEXT	SEGMENT
oc$ = 8
a$ = 52
half_b$ = 84
c$ = 116
discriminant$ = 148
sqrtd$ = 180
root$ = 212
outward_normal$ = 248
$T5 = 484
$T6 = 516
$T7 = 548
$T8 = 580
tv89 = 600
this$ = 640
r$ = 648
t_min$ = 656
t_max$ = 664
rec$ = 672
?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z PROC	; Sphere::hit, COMDAT

; 10   : {

$LN8:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 640				; 00000280H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+680]
	lea	rcx, OFFSET FLAT:__3AA5F7DA_Shapes@cpp
	call	__CheckForDebuggerJustMyCode

; 11   :     vec3 oc = r.origin - m_Center;

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR r$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T5[rbp]
	call	??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR oc$[rbp]
	call	??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z ; vec3::vec3

; 12   :     auto a = r.direction.lensqr();

	mov	rax, QWORD PTR r$[rbp]
	add	rax, 12
	mov	rcx, rax
	call	?lensqr@vec3@@QEBAMXZ			; vec3::lensqr
	movss	DWORD PTR a$[rbp], xmm0

; 13   :     float half_b = oc.dot(r.direction);

	mov	rax, QWORD PTR r$[rbp]
	add	rax, 12
	mov	rdx, rax
	lea	rcx, QWORD PTR oc$[rbp]
	call	?dot@vec3@@QEBAMAEBV1@@Z		; vec3::dot
	movss	DWORD PTR half_b$[rbp], xmm0

; 14   :     float c = oc.lensqr() - pow(m_Radius, 2);

	lea	rcx, QWORD PTR oc$[rbp]
	call	?lensqr@vec3@@QEBAMXZ			; vec3::lensqr
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv89[rbp], xmm0
	mov	edx, 2
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	call	??$pow@MH$0A@@@YANMH@Z			; pow<float,int,0>
	movsd	xmm1, QWORD PTR tv89[rbp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR c$[rbp], xmm0

; 15   : 
; 16   :     auto discriminant = half_b * half_b - a * c;

	movss	xmm0, DWORD PTR half_b$[rbp]
	mulss	xmm0, DWORD PTR half_b$[rbp]
	movss	xmm1, DWORD PTR a$[rbp]
	mulss	xmm1, DWORD PTR c$[rbp]
	subss	xmm0, xmm1
	movss	DWORD PTR discriminant$[rbp], xmm0

; 17   :     if (discriminant < 0) return false;

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR discriminant$[rbp]
	jbe	SHORT $LN2@hit
	xor	al, al
	jmp	$LN1@hit
$LN2@hit:

; 18   :     auto sqrtd = sqrt(discriminant);

	movss	xmm0, DWORD PTR discriminant$[rbp]
	call	?sqrt@@YAMM@Z				; sqrt
	movss	DWORD PTR sqrtd$[rbp], xmm0

; 19   : 
; 20   :     // Find the nearest root that lies in the acceptable range.
; 21   :     auto root = (-half_b - sqrtd) / a;

	movss	xmm0, DWORD PTR half_b$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	subss	xmm0, DWORD PTR sqrtd$[rbp]
	divss	xmm0, DWORD PTR a$[rbp]
	movss	DWORD PTR root$[rbp], xmm0

; 22   :     if (root < t_min || t_max < root) {

	movss	xmm0, DWORD PTR t_min$[rbp]
	comiss	xmm0, DWORD PTR root$[rbp]
	ja	SHORT $LN4@hit
	movss	xmm0, DWORD PTR root$[rbp]
	comiss	xmm0, DWORD PTR t_max$[rbp]
	jbe	SHORT $LN3@hit
$LN4@hit:

; 23   :         root = (-half_b + sqrtd) / a;

	movss	xmm0, DWORD PTR half_b$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR sqrtd$[rbp]
	divss	xmm0, DWORD PTR a$[rbp]
	movss	DWORD PTR root$[rbp], xmm0

; 24   :         if (root < t_min || t_max < root)

	movss	xmm0, DWORD PTR t_min$[rbp]
	comiss	xmm0, DWORD PTR root$[rbp]
	ja	SHORT $LN6@hit
	movss	xmm0, DWORD PTR root$[rbp]
	comiss	xmm0, DWORD PTR t_max$[rbp]
	jbe	SHORT $LN5@hit
$LN6@hit:

; 25   :             return false;

	xor	al, al
	jmp	$LN1@hit
$LN5@hit:
$LN3@hit:

; 26   :     }
; 27   : 
; 28   :     rec.t = root;

	mov	rax, QWORD PTR rec$[rbp]
	movss	xmm0, DWORD PTR root$[rbp]
	movss	DWORD PTR [rax+24], xmm0

; 29   :     rec.p = r.at(rec.t);

	mov	rax, QWORD PTR rec$[rbp]
	movss	xmm2, DWORD PTR [rax+24]
	lea	rdx, QWORD PTR $T6[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	call	?at@ray@@QEBA?AVvec3@@M@Z		; ray::at
	mov	rdi, QWORD PTR rec$[rbp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb

; 30   :     vec3 outward_normal = (rec.p - m_Center) / m_Radius;

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR rec$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T7[rbp]
	call	??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ; glm::operator-<float,0>
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm2, DWORD PTR [rcx+20]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rbp]
	call	??$?KM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@M@Z ; glm::operator/<float,0>
	mov	rdx, rax
	lea	rcx, QWORD PTR outward_normal$[rbp]
	call	??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z ; vec3::vec3

; 31   :     rec.set_face_normal(r, outward_normal);

	lea	r8, QWORD PTR outward_normal$[rbp]
	mov	rdx, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR rec$[rbp]
	call	?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z ; hit_record::set_face_normal

; 32   :     rec.mat = m_Mat;

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rcx, QWORD PTR rec$[rbp]
	add	rcx, 32					; 00000020H
	mov	rdx, rax
	call	??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z ; std::shared_ptr<Material>::operator=

; 33   : 
; 34   :     return true;

	mov	al, 1
$LN1@hit:

; 35   : }

	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+608]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?hit@Sphere@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z ENDP	; Sphere::hit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Shapes.cpp
;	COMDAT ??0Sphere@@QEAA@AEBVvec3@@MV?$shared_ptr@VMaterial@@@std@@@Z
_TEXT	SEGMENT
this$ = 224
center$ = 232
radius$ = 240
mat$ = 248
??0Sphere@@QEAA@AEBVvec3@@MV?$shared_ptr@VMaterial@@@std@@@Z PROC ; Sphere::Sphere, COMDAT

; 6    : {

$LN5:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3AA5F7DA_Shapes@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0Hittable@@QEAA@XZ
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7Sphere@@6B@
	mov	QWORD PTR [rax], rcx

; 5    : 	:m_Center(center), m_Radius(radius), m_Mat(mat)

	mov	rax, QWORD PTR this$[rbp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR center$[rbp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR radius$[rbp]
	movss	DWORD PTR [rax+20], xmm0
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rdx, QWORD PTR mat$[rbp]
	mov	rcx, rax
	call	??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z ; std::shared_ptr<Material>::shared_ptr<Material>

; 7    : }

	mov	rcx, QWORD PTR mat$[rbp]
	call	??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ ; std::shared_ptr<Material>::~shared_ptr<Material>
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??0Sphere@@QEAA@AEBVvec3@@MV?$shared_ptr@VMaterial@@@std@@@Z ENDP ; Sphere::Sphere
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Hittable@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0Hittable@@QEAA@XZ PROC				; Hittable::Hittable, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rbp, rsp
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, OFFSET FLAT:??_7Hittable@@6B@
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0Hittable@@QEAA@XZ ENDP				; Hittable::Hittable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z
_TEXT	SEGMENT
tv73 = 192
__$ReturnUdt$ = 240
v$ = 248
??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z PROC	; glm::operator-<float,0>, COMDAT

; 572  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4E25C9F5_type_vec3@inl
	call	__CheckForDebuggerJustMyCode

; 573  : 		return vec<3, T, Q>(

	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR [rax]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv73[rbp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rbp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]

; 574  : 			-v.x,
; 575  : 			-v.y,
; 576  : 			-v.z);
; 577  : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Hittable.h
;	COMDAT ?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 232
$T3 = 260
$T4 = 292
$T5 = 324
tv70 = 340
tv90 = 344
this$ = 384
r$ = 392
outward_normal$ = 400
?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z PROC ; hit_record::set_face_normal, COMDAT

; 16   :     inline void set_face_normal(const ray& r, const vec3& outward_normal) {

$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 384				; 00000180H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F6517A76_Hittable@h
	call	__CheckForDebuggerJustMyCode

; 17   :         front_face = r.direction.dot(outward_normal) < 0;

	mov	rax, QWORD PTR r$[rbp]
	add	rax, 12
	mov	rdx, QWORD PTR outward_normal$[rbp]
	mov	rcx, rax
	call	?dot@vec3@@QEBAMAEBV1@@Z		; vec3::dot
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN3@set_face_n
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN4@set_face_n
$LN3@set_face_n:
	mov	DWORD PTR tv70[rbp], 0
$LN4@set_face_n:
	mov	rax, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR tv70[rbp]
	mov	BYTE PTR [rax+28], cl

; 18   :         normal = front_face ? outward_normal : -outward_normal;

	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+28]
	test	eax, eax
	je	SHORT $LN5@set_face_n
	lea	rax, QWORD PTR $T4[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR outward_normal$[rbp]
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T3[rbp]
	lea	rcx, QWORD PTR $T4[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T3[rbp]
	mov	QWORD PTR tv90[rbp], rax
	jmp	SHORT $LN6@set_face_n
$LN5@set_face_n:
	mov	rdx, QWORD PTR outward_normal$[rbp]
	lea	rcx, QWORD PTR $T5[rbp]
	call	??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@@Z ; glm::operator-<float,0>
	mov	QWORD PTR tv90[rbp], rax
$LN6@set_face_n:
	mov	rax, QWORD PTR tv90[rbp]
	mov	QWORD PTR $T2[rbp], rax
	mov	rdx, QWORD PTR $T2[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z ; vec3::vec3
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	lea	rdi, QWORD PTR [rax+12]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb

; 19   :     }

	lea	rsp, QWORD PTR [rbp+352]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?set_face_normal@hit_record@@QEAAXAEBUray@@AEBVvec3@@@Z ENDP ; hit_record::set_face_normal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z PROC	; std::shared_ptr<Material>::swap, COMDAT

; 1667 :     void swap(shared_ptr& _Other) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1668 :         this->_Swap(_Other);

	mov	rdx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<Material>::_Swap

; 1669 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z ENDP	; std::shared_ptr<Material>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 272
_Right$ = 280
??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::shared_ptr<Material>::operator=, COMDAT

; 1631 :     shared_ptr& operator=(const shared_ptr& _Right) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1632 :         shared_ptr(_Right).swap(*this);

	mov	rdx, QWORD PTR _Right$[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z ; std::shared_ptr<Material>::shared_ptr<Material>
	mov	rdx, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<Material>::swap
	lea	rcx, QWORD PTR $T1[rbp]
	call	??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ ; std::shared_ptr<Material>::~shared_ptr<Material>

; 1633 :         return *this;

	mov	rax, QWORD PTR this$[rbp]

; 1634 :     }

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::shared_ptr<Material>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ PROC		; std::shared_ptr<Material>::~shared_ptr<Material>, COMDAT

; 1627 :     ~shared_ptr() noexcept { // release resource

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1628 :         this->_Decref();

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ ; std::_Ptr_base<Material>::_Decref

; 1629 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ ENDP		; std::shared_ptr<Material>::~shared_ptr<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z PROC	; std::shared_ptr<Material>::shared_ptr<Material>, COMDAT

; 1573 :     shared_ptr(const shared_ptr& _Other) noexcept { // construct shared_ptr object that owns same resource as _Other

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ	; std::_Ptr_base<Material>::_Ptr_base<Material>

; 1574 :         this->_Copy_construct_from(_Other);

	mov	rdx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z ; std::_Ptr_base<Material>::_Copy_construct_from<Material>

; 1575 :     }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z ENDP	; std::shared_ptr<Material>::shared_ptr<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z PROC	; std::_Ptr_base<Material>::_Swap, COMDAT

; 1343 :     void _Swap(_Ptr_base& _Right) noexcept { // swap pointers

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1344 :         _STD swap(_Ptr, _Right._Ptr);

	mov	rax, QWORD PTR _Right$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, rax
	call	??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z ; std::swap<Material *,0>

; 1345 :         _STD swap(_Rep, _Right._Rep);

	mov	rax, QWORD PTR _Right$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 8
	mov	rdx, rax
	call	??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,0>

; 1346 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z ENDP	; std::_Ptr_base<Material>::_Swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ PROC	; std::_Ptr_base<Material>::_Decref, COMDAT

; 1337 :     void _Decref() noexcept { // decrement reference count

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1338 :         if (_Rep) {

	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@Decref

; 1339 :             _Rep->_Decref();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?_Decref@_Ref_count_base@std@@QEAAXXZ	; std::_Ref_count_base::_Decref
$LN2@Decref:

; 1340 :         }
; 1341 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ ENDP	; std::_Ptr_base<Material>::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$ = 224
?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ PROC	; std::_Ptr_base<Material>::_Incref, COMDAT

; 1331 :     void _Incref() const noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1332 :         if (_Rep) {

	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@Incref

; 1333 :             _Rep->_Incref();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?_Incref@_Ref_count_base@std@@QEAAXXZ	; std::_Ref_count_base::_Incref
$LN2@Incref:

; 1334 :         }
; 1335 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ ENDP	; std::_Ptr_base<Material>::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ PROC		; std::_Ptr_base<Material>::_Ptr_base<Material>, COMDAT

; 1274 :     constexpr _Ptr_base() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1275 : 
; 1276 :     ~_Ptr_base() = default;
; 1277 : 
; 1278 :     template <class _Ty2>
; 1279 :     void _Move_construct_from(_Ptr_base<_Ty2>&& _Right) noexcept {
; 1280 :         // implement shared_ptr's (converting) move ctor and weak_ptr's move ctor
; 1281 :         _Ptr = _Right._Ptr;
; 1282 :         _Rep = _Right._Rep;
; 1283 : 
; 1284 :         _Right._Ptr = nullptr;
; 1285 :         _Right._Rep = nullptr;
; 1286 :     }
; 1287 : 
; 1288 :     template <class _Ty2>
; 1289 :     void _Copy_construct_from(const shared_ptr<_Ty2>& _Other) noexcept {
; 1290 :         // implement shared_ptr's (converting) copy ctor
; 1291 :         _Other._Incref();
; 1292 : 
; 1293 :         _Ptr = _Other._Ptr;
; 1294 :         _Rep = _Other._Rep;
; 1295 :     }
; 1296 : 
; 1297 :     template <class _Ty2>
; 1298 :     void _Alias_construct_from(const shared_ptr<_Ty2>& _Other, element_type* _Px) noexcept {
; 1299 :         // implement shared_ptr's aliasing ctor
; 1300 :         _Other._Incref();
; 1301 : 
; 1302 :         _Ptr = _Px;
; 1303 :         _Rep = _Other._Rep;
; 1304 :     }
; 1305 : 
; 1306 :     template <class _Ty2>
; 1307 :     void _Alias_move_construct_from(shared_ptr<_Ty2>&& _Other, element_type* _Px) noexcept {
; 1308 :         // implement shared_ptr's aliasing move ctor
; 1309 :         _Ptr = _Px;
; 1310 :         _Rep = _Other._Rep;
; 1311 : 
; 1312 :         _Other._Ptr = nullptr;
; 1313 :         _Other._Rep = nullptr;
; 1314 :     }
; 1315 : 
; 1316 :     template <class _Ty0>
; 1317 :     friend class weak_ptr; // specifically, weak_ptr::lock()
; 1318 : 
; 1319 :     template <class _Ty2>
; 1320 :     bool _Construct_from_weak(const weak_ptr<_Ty2>& _Other) noexcept {
; 1321 :         // implement shared_ptr's ctor from weak_ptr, and weak_ptr::lock()
; 1322 :         if (_Other._Rep && _Other._Rep->_Incref_nz()) {
; 1323 :             _Ptr = _Other._Ptr;
; 1324 :             _Rep = _Other._Rep;
; 1325 :             return true;
; 1326 :         }
; 1327 : 
; 1328 :         return false;
; 1329 :     }
; 1330 : 
; 1331 :     void _Incref() const noexcept {
; 1332 :         if (_Rep) {
; 1333 :             _Rep->_Incref();
; 1334 :         }
; 1335 :     }
; 1336 : 
; 1337 :     void _Decref() noexcept { // decrement reference count
; 1338 :         if (_Rep) {
; 1339 :             _Rep->_Decref();
; 1340 :         }
; 1341 :     }
; 1342 : 
; 1343 :     void _Swap(_Ptr_base& _Right) noexcept { // swap pointers
; 1344 :         _STD swap(_Ptr, _Right._Ptr);
; 1345 :         _STD swap(_Rep, _Right._Rep);
; 1346 :     }
; 1347 : 
; 1348 :     template <class _Ty2>
; 1349 :     void _Weakly_construct_from(const _Ptr_base<_Ty2>& _Other) noexcept { // implement weak_ptr's ctors
; 1350 :         if (_Other._Rep) {
; 1351 :             _Ptr = _Other._Ptr;
; 1352 :             _Rep = _Other._Rep;
; 1353 :             _Rep->_Incwref();
; 1354 :         } else {
; 1355 :             _STL_INTERNAL_CHECK(!_Ptr && !_Rep);
; 1356 :         }
; 1357 :     }
; 1358 : 
; 1359 :     template <class _Ty2>
; 1360 :     void _Weakly_convert_lvalue_avoiding_expired_conversions(const _Ptr_base<_Ty2>& _Other) noexcept {
; 1361 :         // implement weak_ptr's copy converting ctor
; 1362 :         if (_Other._Rep) {
; 1363 :             _Rep = _Other._Rep; // always share ownership
; 1364 :             _Rep->_Incwref();
; 1365 : 
; 1366 :             if (_Rep->_Incref_nz()) {
; 1367 :                 _Ptr = _Other._Ptr; // keep resource alive during conversion, handling virtual inheritance
; 1368 :                 _Rep->_Decref();
; 1369 :             } else {
; 1370 :                 _STL_INTERNAL_CHECK(!_Ptr);
; 1371 :             }
; 1372 :         } else {
; 1373 :             _STL_INTERNAL_CHECK(!_Ptr && !_Rep);
; 1374 :         }
; 1375 :     }
; 1376 : 
; 1377 :     template <class _Ty2>
; 1378 :     void _Weakly_convert_rvalue_avoiding_expired_conversions(_Ptr_base<_Ty2>&& _Other) noexcept {
; 1379 :         // implement weak_ptr's move converting ctor
; 1380 :         _Rep        = _Other._Rep; // always transfer ownership
; 1381 :         _Other._Rep = nullptr;
; 1382 : 
; 1383 :         if (_Rep && _Rep->_Incref_nz()) {
; 1384 :             _Ptr = _Other._Ptr; // keep resource alive during conversion, handling virtual inheritance
; 1385 :             _Rep->_Decref();
; 1386 :         } else {
; 1387 :             _STL_INTERNAL_CHECK(!_Ptr);
; 1388 :         }
; 1389 : 
; 1390 :         _Other._Ptr = nullptr;
; 1391 :     }
; 1392 : 
; 1393 :     void _Incwref() const noexcept {
; 1394 :         if (_Rep) {
; 1395 :             _Rep->_Incwref();
; 1396 :         }
; 1397 :     }
; 1398 : 
; 1399 :     void _Decwref() noexcept { // decrement weak reference count
; 1400 :         if (_Rep) {
; 1401 :             _Rep->_Decwref();
; 1402 :         }
; 1403 :     }
; 1404 : 
; 1405 : private:
; 1406 :     element_type* _Ptr{nullptr};

	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax], 0

; 1407 :     _Ref_count_base* _Rep{nullptr};

	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0

; 1274 :     constexpr _Ptr_base() noexcept = default;

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ ENDP		; std::_Ptr_base<Material>::_Ptr_base<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Decwref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Decwref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decwref, COMDAT

; 1114 :     void _Decwref() noexcept { // decrement weak reference count

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1115 :         if (_MT_DECR(_Weaks) == 0) {

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 12
	mov	ecx, -1
	lock xadd DWORD PTR [rax], ecx
	dec	ecx
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN2@Decwref

; 1116 :             _Delete_this();

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	call	QWORD PTR [rax+8]
$LN2@Decwref:

; 1117 :         }
; 1118 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Decwref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decwref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Decref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Decref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decref, COMDAT

; 1107 :     void _Decref() noexcept { // decrement use count

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1108 :         if (_MT_DECR(_Uses) == 0) {

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	ecx, -1
	lock xadd DWORD PTR [rax], ecx
	dec	ecx
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN2@Decref

; 1109 :             _Destroy();

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	call	QWORD PTR [rax]

; 1110 :             _Decwref();

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Decwref@_Ref_count_base@std@@QEAAXXZ	; std::_Ref_count_base::_Decwref
$LN2@Decref:

; 1111 :         }
; 1112 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Decref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Incref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Incref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Incref, COMDAT

; 1099 :     void _Incref() noexcept { // increment use count

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1100 :         _MT_INCR(_Uses);

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	lock inc DWORD PTR [rax]

; 1101 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Incref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Ray.h
;	COMDAT ?at@ray@@QEBA?AVvec3@@M@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
__$ReturnUdt$ = 296
t$ = 304
?at@ray@@QEBA?AVvec3@@M@Z PROC				; ray::at, COMDAT

; 16   : 	vec3 at(float t) const {

$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__32677E70_Ray@h
	call	__CheckForDebuggerJustMyCode

; 17   : 		return origin + t * direction;

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 12
	mov	r8, rax
	movss	xmm1, DWORD PTR t$[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z ; glm::operator*<float,0>
	mov	rcx, QWORD PTR this$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rbp]
	call	??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ; glm::operator+<float,0>
	mov	rdx, rax
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z ; vec3::vec3
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]

; 18   : 	}

	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?at@ray@@QEBA?AVvec3@@M@Z ENDP				; ray::at
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 192
__$ReturnUdt$ = 240
v1$ = 248
v2$ = 256
??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 619  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4E25C9F5_type_vec3@inl
	call	__CheckForDebuggerJustMyCode

; 620  : 		return vec<3, T, Q>(

	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rbp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rbp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]

; 621  : 			v1.x + v2.x,
; 622  : 			v1.y + v2.y,
; 623  : 			v1.z + v2.z);
; 624  : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$?HM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z
_TEXT	SEGMENT
tv76 = 192
__$ReturnUdt$ = 240
v1$ = 248
v2$ = 256
??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 664  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4E25C9F5_type_vec3@inl
	call	__CheckForDebuggerJustMyCode

; 665  : 		return vec<3, T, Q>(

	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	subss	xmm1, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR v1$[rbp]
	mov	rcx, QWORD PTR v2$[rbp]
	movss	xmm2, DWORD PTR [rax]
	subss	xmm2, DWORD PTR [rcx]
	movss	DWORD PTR tv76[rbp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv76[rbp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]

; 666  : 			v1.x - v2.x,
; 667  : 			v1.y - v2.y,
; 668  : 			v1.z - v2.z);
; 669  : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$?GM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@AEBU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z
_TEXT	SEGMENT
tv73 = 192
__$ReturnUdt$ = 240
scalar$ = 248
v$ = 256
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z PROC	; glm::operator*<float,0>, COMDAT

; 691  : 	{

$LN3:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4E25C9F5_type_vec3@inl
	call	__CheckForDebuggerJustMyCode

; 692  : 		return vec<3, T, Q>(

	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR scalar$[rbp]
	mulss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR scalar$[rbp]
	mulss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR scalar$[rbp]
	mulss	xmm2, DWORD PTR [rax]
	movss	DWORD PTR tv73[rbp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv73[rbp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z	; glm::vec<3,float,0>::vec<3,float,0>
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]

; 693  : 			scalar * v.x,
; 694  : 			scalar * v.y,
; 695  : 			scalar * v.z);
; 696  : 	}

	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$?DM$0A@@glm@@YA?AU?$vec@$02M$0A@@0@MAEBU10@@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\func_geometric.inl
;	COMDAT ??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z
_TEXT	SEGMENT
x$ = 224
y$ = 232
??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z PROC	; glm::dot<3,float,0>, COMDAT

; 168  : 	{

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__68421003_func_geometric@inl
	call	__CheckForDebuggerJustMyCode

; 169  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
; 170  : 		return detail::compute_dot<vec<L, T, Q>, T, detail::is_aligned<Q>::value>::call(x, y);

	mov	rdx, QWORD PTR y$[rbp]
	mov	rcx, QWORD PTR x$[rbp]
	call	?call@?$compute_dot@U?$vec@$02M$0A@@glm@@M$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@0@Z ; glm::detail::compute_dot<glm::vec<3,float,0>,float,0>::call

; 171  : 	}

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z ENDP	; glm::dot<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\cmath
;	COMDAT ??$pow@MH$0A@@@YANMH@Z
_TEXT	SEGMENT
tv67 = 192
_Left$ = 240
_Right$ = 248
??$pow@MH$0A@@@YANMH@Z PROC				; pow<float,int,0>, COMDAT

; 672  : _GENERIC_MATH2(pow)

$LN3:
	mov	DWORD PTR [rsp+16], edx
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__6D66DEAE_cmath
	call	__CheckForDebuggerJustMyCode
	cvtsi2sd xmm0, DWORD PTR _Right$[rbp]
	cvtss2sd xmm1, DWORD PTR _Left$[rbp]
	movsd	QWORD PTR tv67[rbp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv67[rbp]
	call	pow
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$pow@MH$0A@@@YANMH@Z ENDP				; pow<float,int,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\func_geometric.inl
;	COMDAT ??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z
_TEXT	SEGMENT
v$ = 224
??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z PROC	; glm::length<3,float,0>, COMDAT

; 137  : 	{

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__68421003_func_geometric@inl
	call	__CheckForDebuggerJustMyCode

; 138  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");
; 139  : 
; 140  : 		return detail::compute_length<L, T, Q, detail::is_aligned<Q>::value>::call(v);

	mov	rcx, QWORD PTR v$[rbp]
	call	?call@?$compute_length@$02M$0A@$0A@@detail@glm@@SAMAEBU?$vec@$02M$0A@@3@@Z ; glm::detail::compute_length<3,float,0,0>::call

; 141  : 	}

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z ENDP	; glm::length<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Vec3.h
;	COMDAT ?dot@vec3@@QEBAMAEBV1@@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
other$ = 264
?dot@vec3@@QEBAMAEBV1@@Z PROC				; vec3::dot, COMDAT

; 15   : 	inline float dot(const vec3& other) const { return glm::dot(static_cast<glm::vec3>(*this), other); }

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__F03674A5_Vec3@h
	call	__CheckForDebuggerJustMyCode
	lea	rax, QWORD PTR $T1[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rbp]
	mov	ecx, 12
	rep movsb
	mov	rdx, QWORD PTR other$[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??$dot@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@0@Z ; glm::dot<3,float,0>
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?dot@vec3@@QEBAMAEBV1@@Z ENDP				; vec3::dot
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Vec3.h
;	COMDAT ?lensqr@vec3@@QEBAMXZ
_TEXT	SEGMENT
this$ = 224
?lensqr@vec3@@QEBAMXZ PROC				; vec3::lensqr, COMDAT

; 14   : 	inline float lensqr() const { return (float)pow(len(), 2); }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__F03674A5_Vec3@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?len@vec3@@QEBAMXZ			; vec3::len
	mov	edx, 2
	call	??$pow@MH$0A@@@YANMH@Z			; pow<float,int,0>
	cvtsd2ss xmm0, xmm0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?lensqr@vec3@@QEBAMXZ ENDP				; vec3::lensqr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Vec3.h
;	COMDAT ?len@vec3@@QEBAMXZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
?len@vec3@@QEBAMXZ PROC					; vec3::len, COMDAT

; 13   : 	inline float len() const { return glm::length(static_cast<glm::vec3>(*this)); }

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__F03674A5_Vec3@h
	call	__CheckForDebuggerJustMyCode
	lea	rax, QWORD PTR $T1[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rbp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rbp]
	call	??$length@$02M$0A@@glm@@YAMAEBU?$vec@$02M$0A@@0@@Z ; glm::length<3,float,0>
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?len@vec3@@QEBAMXZ ENDP					; vec3::len
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Vec3.h
;	COMDAT ??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z PROC		; vec3::vec3, COMDAT

; 11   : 	vec3(const glm::vec3& v) { this->x = v.x; this->y = v.y; this->z = v.z;}

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F03674A5_Vec3@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0vec3@@QEAA@AEBU?$vec@$02M$0A@@glm@@@Z ENDP		; vec3::vec3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\vendor\glm\glm\detail\type_vec3.inl
;	COMDAT ??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 224
_x$ = 232
_y$ = 240
_z$ = 248
??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z PROC			; glm::vec<3,float,0>::vec<3,float,0>, COMDAT

; 41   : 	{}

$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__4E25C9F5_type_vec3@inl
	call	__CheckForDebuggerJustMyCode

; 40   : 		: x(_x), y(_y), z(_z)

	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _x$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _y$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _z$[rbp]
	movss	DWORD PTR [rax+8], xmm0

; 41   : 	{}

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$vec@$02M$0A@@glm@@QEAA@MMM@Z ENDP			; glm::vec<3,float,0>::vec<3,float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
_Xx$ = 224
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 264  : _NODISCARD _Check_return_ inline float sqrt(_In_ float _Xx) noexcept /* strengthened */ {

$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__6D66DEAE_cmath
	call	__CheckForDebuggerJustMyCode

; 265  :     return _CSTD sqrtf(_Xx);

	movss	xmm0, DWORD PTR _Xx$[rbp]
	call	sqrtf

; 266  : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
END
