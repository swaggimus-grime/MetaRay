; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30040.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__02E23235_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__80A05712_cstdlib DB 01H
__6D66DEAE_cmath DB 01H
__D1154D4E_type_traits DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__44860E64_limits DB 01H
__8AF6250F_func_common@inl DB 01H
__D2FE3C91_type_half@inl DB 01H
__F4C89D2A_func_packing@inl DB 01H
__20BB4341_malloc@h DB 01H
__9FAB920F_func_integer@inl DB 01H
__BDCC0984_vcruntime_exception@h DB 01H
__89F7010A_exception DB 01H
__A751F051_corecrt_memory@h DB 01H
__32E5F013_string@h DB 01H
__7CE971A6_xutility DB 01H
__DD38B15A_xmemory DB 01H
__633B43DE_algorithm DB 01H
__317CA204_xbit_ops@h DB 01H
__A9EB37C6_xstring DB 01H
__047EEC0A_random DB 01H
__DD86A519_RandomUtil@h DB 01H
__F03674A5_Vec3@h DB 01H
__32677E70_Ray@h DB 01H
__65F43743_vcruntime_typeinfo@h DB 01H
__0C3682BF_typeinfo DB 01H
__F82802EA_memory DB 01H
__F6517A76_Hittable@h DB 01H
__BADA5728_Hittable@cpp DB 01H
__092B7E84_vector DB 01H
__B7ADD299_utility DB 01H
__FC0515E5_type_vec4@inl DB 01H
__7345E045_type_vec2@inl DB 01H
__B2C7E9E2_type_vec2@hpp DB 01H
__3D871C42_type_vec4@hpp DB 01H
__68421003_func_geometric@inl DB 01H
__4E25C9F5_type_vec3@inl DB 01H
__40B2458B_xstddef DB 01H
__C2238C2F__vectorize@hpp DB 01H
__8FA7C052_type_vec3@hpp DB 01H
__C6245A35_func_exponential@inl DB 01H
msvcjmc	ENDS
PUBLIC	?_Incref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Incref
PUBLIC	?_Decref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decref
PUBLIC	?_Decwref@_Ref_count_base@std@@QEAAXXZ		; std::_Ref_count_base::_Decwref
PUBLIC	??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ		; std::_Ptr_base<Material>::_Ptr_base<Material>
PUBLIC	?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ	; std::_Ptr_base<Material>::_Incref
PUBLIC	?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ	; std::_Ptr_base<Material>::_Decref
PUBLIC	?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<Material>::_Swap
PUBLIC	??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ	; std::shared_ptr<Material>::shared_ptr<Material>
PUBLIC	??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z	; std::shared_ptr<Material>::shared_ptr<Material>
PUBLIC	??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ	; std::shared_ptr<Material>::~shared_ptr<Material>
PUBLIC	??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z ; std::shared_ptr<Material>::operator=
PUBLIC	?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<Material>::swap
PUBLIC	??0hit_record@@QEAA@XZ				; hit_record::hit_record
PUBLIC	??1hit_record@@QEAA@XZ				; hit_record::~hit_record
PUBLIC	??4hit_record@@QEAAAEAU0@AEBU0@@Z		; hit_record::operator=
PUBLIC	?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z ; HitList::hit
PUBLIC	?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_end
PUBLIC	?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ ; std::_Ptr_base<Hittable>::get
PUBLIC	??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ ; std::shared_ptr<Hittable>::operator-><Hittable,0>
PUBLIC	??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z ; std::_Ptr_base<Material>::_Copy_construct_from<Material>
PUBLIC	??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z ; std::swap<Material *,0>
PUBLIC	??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,0>
PUBLIC	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
PUBLIC	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
PUBLIC	__JustMyCode_Default
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Incref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?_Incref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0hit_record@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??0hit_record@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1hit_record@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1hit_record@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4hit_record@@QEAAAEAU0@AEBU0@@Z DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$??4hit_record@@QEAAAEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z DD imagerel $LN8
	DD	imagerel $LN8+371
	DD	imagerel $unwind$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA DD imagerel ?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA
	DD	imagerel ?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z DD 025053101H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0 DB 05fH ; std::swap<std::_Ref_count_base *,0>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc DD 028H ; std::swap<std::_Ref_count_base *,0>
	DD	08H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcName$0
	ORG $+48
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData DD 01H ; std::swap<std::_Ref_count_base *,0>
	DD	00H
	DQ	FLAT:??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z DD 025053101H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcName$0 DB 05fH ; std::swap<Material *,0>
	DB	054H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+11
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcVarDesc DD 028H ; std::swap<Material *,0>
	DD	08H
	DQ	FLAT:??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcName$0
	ORG $+48
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcFrameData DD 01H ; std::swap<Material *,0>
	DD	00H
	DQ	FLAT:??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z DB 06H
	DB	00H
	DB	00H
	DB	0a6H
	DB	02H
	DB	0c9H, 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
	DD	imagerel $ip2state$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z DD 035053d11H
	DD	011f3324H
	DD	070180045H
	DD	05017H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcName$0 DB 074H ; HitList::hit
	DB	065H
	DB	06dH
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	00H
	ORG $+7
?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcVarDesc DD 038H ; HitList::hit
	DD	030H
	DQ	FLAT:?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcName$0
	ORG $+48
?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcFrameData DD 01H ; HitList::hit
	DD	00H
	DQ	FLAT:?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4hit_record@@QEAAAEAU0@AEBU0@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1hit_record@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0hit_record@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decwref@_Ref_count_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Decref@_Ref_count_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	02aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Incref@_Ref_count_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z PROC ; std::move<std::_Ref_count_base * &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D1154D4E_type_traits
	call	__CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rbp]

; 1457 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ENDP ; std::move<std::_Ref_count_base * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z PROC ; std::move<Material * &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D1154D4E_type_traits
	call	__CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	rax, QWORD PTR _Arg$[rbp]

; 1457 : }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ENDP ; std::move<Material * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z
_TEXT	SEGMENT
_Tmp$ = 8
_Left$ = 256
_Right$ = 264
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z PROC ; std::swap<std::_Ref_count_base *,0>, COMDAT

; 103  :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 10
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__B7ADD299_utility
	call	__CheckForDebuggerJustMyCode

; 104  :     _Ty _Tmp = _STD move(_Left);

	mov	rcx, QWORD PTR _Left$[rbp]
	call	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Tmp$[rbp], rax

; 105  :     _Left    = _STD move(_Right);

	mov	rcx, QWORD PTR _Right$[rbp]
	call	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
	mov	rcx, QWORD PTR _Left$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 106  :     _Right   = _STD move(_Tmp);

	lea	rcx, QWORD PTR _Tmp$[rbp]
	call	??$move@AEAPEAV_Ref_count_base@std@@@std@@YA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z ; std::move<std::_Ref_count_base * &>
	mov	rcx, QWORD PTR _Right$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 107  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ENDP ; std::swap<std::_Ref_count_base *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\utility
;	COMDAT ??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z
_TEXT	SEGMENT
_Tmp$ = 8
_Left$ = 256
_Right$ = 264
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z PROC ; std::swap<Material *,0>, COMDAT

; 103  :     is_nothrow_move_constructible_v<_Ty>&& is_nothrow_move_assignable_v<_Ty>) {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 10
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	lea	rcx, OFFSET FLAT:__B7ADD299_utility
	call	__CheckForDebuggerJustMyCode

; 104  :     _Ty _Tmp = _STD move(_Left);

	mov	rcx, QWORD PTR _Left$[rbp]
	call	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR _Tmp$[rbp], rax

; 105  :     _Left    = _STD move(_Right);

	mov	rcx, QWORD PTR _Right$[rbp]
	call	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
	mov	rcx, QWORD PTR _Left$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 106  :     _Right   = _STD move(_Tmp);

	lea	rcx, QWORD PTR _Tmp$[rbp]
	call	??$move@AEAPEAVMaterial@@@std@@YA$$QEAPEAVMaterial@@AEAPEAV1@@Z ; std::move<Material * &>
	mov	rcx, QWORD PTR _Right$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx], rax

; 107  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z ENDP ; std::swap<Material *,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z PROC ; std::_Ptr_base<Material>::_Copy_construct_from<Material>, COMDAT

; 1289 :     void _Copy_construct_from(const shared_ptr<_Ty2>& _Other) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1290 :         // implement shared_ptr's (converting) copy ctor
; 1291 :         _Other._Incref();

	mov	rcx, QWORD PTR _Other$[rbp]
	call	?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ ; std::_Ptr_base<Material>::_Incref

; 1292 : 
; 1293 :         _Ptr = _Other._Ptr;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 1294 :         _Rep = _Other._Rep;

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx

; 1295 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z ENDP ; std::_Ptr_base<Material>::_Copy_construct_from<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ
_TEXT	SEGMENT
this$ = 224
??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ PROC ; std::shared_ptr<Hittable>::operator-><Hittable,0>, COMDAT

; 1698 :     _NODISCARD _Ty2* operator->() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1699 :         return get();

	mov	rcx, QWORD PTR this$[rbp]
	call	?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ ; std::_Ptr_base<Hittable>::get

; 1700 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ ENDP ; std::shared_ptr<Hittable>::operator-><Hittable,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ
_TEXT	SEGMENT
this$ = 224
?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ PROC ; std::_Ptr_base<Hittable>::get, COMDAT

; 1270 :     _NODISCARD element_type* get() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1271 :         return _Ptr;

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]

; 1272 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?get@?$_Ptr_base@VHittable@@@std@@IEBAPEAVHittable@@XZ ENDP ; std::_Ptr_base<Hittable>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ PROC ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_end, COMDAT

; 1538 :     _NODISCARD _CONSTEXPR20_CONTAINER const_pointer _Unchecked_end() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__092B7E84_vector
	call	__CheckForDebuggerJustMyCode

; 1539 :         return _Mypair._Myval2._Mylast;

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+16]

; 1540 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ ENDP ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ PROC ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_begin, COMDAT

; 1530 :     _NODISCARD _CONSTEXPR20_CONTAINER const_pointer _Unchecked_begin() const noexcept {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__092B7E84_vector
	call	__CheckForDebuggerJustMyCode

; 1531 :         return _Mypair._Myval2._Myfirst;

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]

; 1532 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ ENDP ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\hunte\source\repos\MetaRay\MetaRay\src\Hittable.cpp
;	COMDAT ?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z
_TEXT	SEGMENT
temp_rec$ = 8
hit_anything$ = 84
closest_so_far$ = 116
<range>$L0$4 = 152
<begin>$L0$5 = 184
<end>$L0$6 = 216
object$7 = 248
$T8 = 468
tv77 = 488
this$ = 528
r$ = 536
t_min$ = 544
t_max$ = 552
rec$ = 560
?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z PROC	; HitList::hit, COMDAT

; 4    : {

$LN8:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+584]
	lea	rcx, OFFSET FLAT:__BADA5728_Hittable@cpp
	call	__CheckForDebuggerJustMyCode

; 5    :     hit_record temp_rec;

	lea	rcx, QWORD PTR temp_rec$[rbp]
	call	??0hit_record@@QEAA@XZ
	npad	1

; 6    :     bool hit_anything = false;

	mov	BYTE PTR hit_anything$[rbp], 0

; 7    :     auto closest_so_far = t_max;

	movss	xmm0, DWORD PTR t_max$[rbp]
	movss	DWORD PTR closest_so_far$[rbp], xmm0

; 8    : 
; 9    :     for (const auto& object : m_Objects) {

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR <range>$L0$4[rbp], rax
	mov	rcx, QWORD PTR <range>$L0$4[rbp]
	call	?_Unchecked_begin@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_begin
	mov	QWORD PTR <begin>$L0$5[rbp], rax
	mov	rcx, QWORD PTR <range>$L0$4[rbp]
	call	?_Unchecked_end@?$vector@V?$shared_ptr@VHittable@@@std@@V?$allocator@V?$shared_ptr@VHittable@@@std@@@2@@std@@QEBAPEBV?$shared_ptr@VHittable@@@2@XZ ; std::vector<std::shared_ptr<Hittable>,std::allocator<std::shared_ptr<Hittable> > >::_Unchecked_end
	mov	QWORD PTR <end>$L0$6[rbp], rax
	jmp	SHORT $LN4@hit
$LN2@hit:
	mov	rax, QWORD PTR <begin>$L0$5[rbp]
	add	rax, 16
	mov	QWORD PTR <begin>$L0$5[rbp], rax
$LN4@hit:
	mov	rax, QWORD PTR <end>$L0$6[rbp]
	cmp	QWORD PTR <begin>$L0$5[rbp], rax
	je	SHORT $LN3@hit
	mov	rax, QWORD PTR <begin>$L0$5[rbp]
	mov	QWORD PTR object$7[rbp], rax

; 10   :         if (object->hit(r, t_min, closest_so_far, temp_rec)) {

	mov	rcx, QWORD PTR object$7[rbp]
	call	??$?CVHittable@@$0A@@?$shared_ptr@VHittable@@@std@@QEBAPEAVHittable@@XZ ; std::shared_ptr<Hittable>::operator-><Hittable,0>
	mov	QWORD PTR tv77[rbp], rax
	mov	rax, QWORD PTR tv77[rbp]
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR temp_rec$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	movss	xmm3, DWORD PTR closest_so_far$[rbp]
	movss	xmm2, DWORD PTR t_min$[rbp]
	mov	rdx, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR tv77[rbp]
	call	QWORD PTR [rax]
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@hit

; 11   :             hit_anything = true;

	mov	BYTE PTR hit_anything$[rbp], 1

; 12   :             closest_so_far = temp_rec.t;

	movss	xmm0, DWORD PTR temp_rec$[rbp+24]
	movss	DWORD PTR closest_so_far$[rbp], xmm0

; 13   :             rec = temp_rec;

	lea	rdx, QWORD PTR temp_rec$[rbp]
	mov	rcx, QWORD PTR rec$[rbp]
	call	??4hit_record@@QEAAAEAU0@AEBU0@@Z
$LN5@hit:

; 14   :         }
; 15   :     }

	jmp	$LN2@hit
$LN3@hit:

; 16   : 
; 17   :     return hit_anything;

	movzx	eax, BYTE PTR hit_anything$[rbp]
	mov	BYTE PTR $T8[rbp], al
	lea	rcx, QWORD PTR temp_rec$[rbp]
	call	??1hit_record@@QEAA@XZ
	movzx	eax, BYTE PTR $T8[rbp]

; 18   : }

	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
?hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z ENDP	; HitList::hit
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
temp_rec$ = 8
hit_anything$ = 84
closest_so_far$ = 116
<range>$L0$4 = 152
<begin>$L0$5 = 184
<end>$L0$6 = 216
object$7 = 248
$T8 = 468
tv77 = 488
this$ = 528
r$ = 536
t_min$ = 544
t_max$ = 552
rec$ = 560
?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA PROC ; `HitList::hit'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+48]
	lea	rcx, QWORD PTR temp_rec$[rbp]
	call	??1hit_record@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA ENDP ; `HitList::hit'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
temp_rec$ = 8
hit_anything$ = 84
closest_so_far$ = 116
<range>$L0$4 = 152
<begin>$L0$5 = 184
<end>$L0$6 = 216
object$7 = 248
$T8 = 468
tv77 = 488
this$ = 528
r$ = 536
t_min$ = 544
t_max$ = 552
rec$ = 560
?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA PROC ; `HitList::hit'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+48]
	lea	rcx, QWORD PTR temp_rec$[rbp]
	call	??1hit_record@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??hit@HitList@@UEBA_NAEBUray@@MMAEAUhit_record@@@Z@4HA ENDP ; `HitList::hit'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4hit_record@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??4hit_record@@QEAAAEAU0@AEBU0@@Z PROC			; hit_record::operator=, COMDAT
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, QWORD PTR this$[rbp]
	mov	rsi, QWORD PTR __that$[rbp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR __that$[rbp]
	lea	rdi, QWORD PTR [rax+12]
	lea	rsi, QWORD PTR [rcx+12]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR __that$[rbp]
	movss	xmm0, DWORD PTR [rcx+24]
	movss	DWORD PTR [rax+24], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR __that$[rbp]
	movzx	ecx, BYTE PTR [rcx+28]
	mov	BYTE PTR [rax+28], cl
	mov	rax, QWORD PTR __that$[rbp]
	add	rax, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 32					; 00000020H
	mov	rdx, rax
	call	??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z ; std::shared_ptr<Material>::operator=
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??4hit_record@@QEAAAEAU0@AEBU0@@Z ENDP			; hit_record::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1hit_record@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1hit_record@@QEAA@XZ PROC				; hit_record::~hit_record, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ ; std::shared_ptr<Material>::~shared_ptr<Material>
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1hit_record@@QEAA@XZ ENDP				; hit_record::~hit_record
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0hit_record@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0hit_record@@QEAA@XZ PROC				; hit_record::hit_record, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ ; std::shared_ptr<Material>::shared_ptr<Material>
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0hit_record@@QEAA@XZ ENDP				; hit_record::hit_record
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z PROC	; std::shared_ptr<Material>::swap, COMDAT

; 1667 :     void swap(shared_ptr& _Other) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1668 :         this->_Swap(_Other);

	mov	rdx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z ; std::_Ptr_base<Material>::_Swap

; 1669 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z ENDP	; std::shared_ptr<Material>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 272
_Right$ = 280
??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::shared_ptr<Material>::operator=, COMDAT

; 1631 :     shared_ptr& operator=(const shared_ptr& _Right) noexcept {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1632 :         shared_ptr(_Right).swap(*this);

	mov	rdx, QWORD PTR _Right$[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z ; std::shared_ptr<Material>::shared_ptr<Material>
	mov	rdx, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?swap@?$shared_ptr@VMaterial@@@std@@QEAAXAEAV12@@Z ; std::shared_ptr<Material>::swap
	lea	rcx, QWORD PTR $T1[rbp]
	call	??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ ; std::shared_ptr<Material>::~shared_ptr<Material>

; 1633 :         return *this;

	mov	rax, QWORD PTR this$[rbp]

; 1634 :     }

	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
??4?$shared_ptr@VMaterial@@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::shared_ptr<Material>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ PROC		; std::shared_ptr<Material>::~shared_ptr<Material>, COMDAT

; 1627 :     ~shared_ptr() noexcept { // release resource

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1628 :         this->_Decref();

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ ; std::_Ptr_base<Material>::_Decref

; 1629 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$shared_ptr@VMaterial@@@std@@QEAA@XZ ENDP		; std::shared_ptr<Material>::~shared_ptr<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z PROC	; std::shared_ptr<Material>::shared_ptr<Material>, COMDAT

; 1573 :     shared_ptr(const shared_ptr& _Other) noexcept { // construct shared_ptr object that owns same resource as _Other

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ	; std::_Ptr_base<Material>::_Ptr_base<Material>

; 1574 :         this->_Copy_construct_from(_Other);

	mov	rdx, QWORD PTR _Other$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	??$_Copy_construct_from@VMaterial@@@?$_Ptr_base@VMaterial@@@std@@IEAAXAEBV?$shared_ptr@VMaterial@@@1@@Z ; std::_Ptr_base<Material>::_Copy_construct_from<Material>

; 1575 :     }

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$shared_ptr@VMaterial@@@std@@QEAA@AEBV01@@Z ENDP	; std::shared_ptr<Material>::shared_ptr<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ PROC		; std::shared_ptr<Material>::shared_ptr<Material>, COMDAT

; 1515 :     constexpr shared_ptr() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ	; std::_Ptr_base<Material>::_Ptr_base<Material>
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$shared_ptr@VMaterial@@@std@@QEAA@XZ ENDP		; std::shared_ptr<Material>::shared_ptr<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z PROC	; std::_Ptr_base<Material>::_Swap, COMDAT

; 1343 :     void _Swap(_Ptr_base& _Right) noexcept { // swap pointers

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1344 :         _STD swap(_Ptr, _Right._Ptr);

	mov	rax, QWORD PTR _Right$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, rax
	call	??$swap@PEAVMaterial@@$0A@@std@@YAXAEAPEAVMaterial@@0@Z ; std::swap<Material *,0>

; 1345 :         _STD swap(_Rep, _Right._Rep);

	mov	rax, QWORD PTR _Right$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 8
	mov	rdx, rax
	call	??$swap@PEAV_Ref_count_base@std@@$0A@@std@@YAXAEAPEAV_Ref_count_base@0@0@Z ; std::swap<std::_Ref_count_base *,0>

; 1346 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Swap@?$_Ptr_base@VMaterial@@@std@@IEAAXAEAV12@@Z ENDP	; std::_Ptr_base<Material>::_Swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ PROC	; std::_Ptr_base<Material>::_Decref, COMDAT

; 1337 :     void _Decref() noexcept { // decrement reference count

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1338 :         if (_Rep) {

	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@Decref

; 1339 :             _Rep->_Decref();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?_Decref@_Ref_count_base@std@@QEAAXXZ	; std::_Ref_count_base::_Decref
$LN2@Decref:

; 1340 :         }
; 1341 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Decref@?$_Ptr_base@VMaterial@@@std@@IEAAXXZ ENDP	; std::_Ptr_base<Material>::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$ = 224
?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ PROC	; std::_Ptr_base<Material>::_Incref, COMDAT

; 1331 :     void _Incref() const noexcept {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1332 :         if (_Rep) {

	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@Incref

; 1333 :             _Rep->_Incref();

	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?_Incref@_Ref_count_base@std@@QEAAXXZ	; std::_Ref_count_base::_Incref
$LN2@Incref:

; 1334 :         }
; 1335 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Incref@?$_Ptr_base@VMaterial@@@std@@IEBAXXZ ENDP	; std::_Ptr_base<Material>::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ PROC		; std::_Ptr_base<Material>::_Ptr_base<Material>, COMDAT

; 1274 :     constexpr _Ptr_base() noexcept = default;

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1275 : 
; 1276 :     ~_Ptr_base() = default;
; 1277 : 
; 1278 :     template <class _Ty2>
; 1279 :     void _Move_construct_from(_Ptr_base<_Ty2>&& _Right) noexcept {
; 1280 :         // implement shared_ptr's (converting) move ctor and weak_ptr's move ctor
; 1281 :         _Ptr = _Right._Ptr;
; 1282 :         _Rep = _Right._Rep;
; 1283 : 
; 1284 :         _Right._Ptr = nullptr;
; 1285 :         _Right._Rep = nullptr;
; 1286 :     }
; 1287 : 
; 1288 :     template <class _Ty2>
; 1289 :     void _Copy_construct_from(const shared_ptr<_Ty2>& _Other) noexcept {
; 1290 :         // implement shared_ptr's (converting) copy ctor
; 1291 :         _Other._Incref();
; 1292 : 
; 1293 :         _Ptr = _Other._Ptr;
; 1294 :         _Rep = _Other._Rep;
; 1295 :     }
; 1296 : 
; 1297 :     template <class _Ty2>
; 1298 :     void _Alias_construct_from(const shared_ptr<_Ty2>& _Other, element_type* _Px) noexcept {
; 1299 :         // implement shared_ptr's aliasing ctor
; 1300 :         _Other._Incref();
; 1301 : 
; 1302 :         _Ptr = _Px;
; 1303 :         _Rep = _Other._Rep;
; 1304 :     }
; 1305 : 
; 1306 :     template <class _Ty2>
; 1307 :     void _Alias_move_construct_from(shared_ptr<_Ty2>&& _Other, element_type* _Px) noexcept {
; 1308 :         // implement shared_ptr's aliasing move ctor
; 1309 :         _Ptr = _Px;
; 1310 :         _Rep = _Other._Rep;
; 1311 : 
; 1312 :         _Other._Ptr = nullptr;
; 1313 :         _Other._Rep = nullptr;
; 1314 :     }
; 1315 : 
; 1316 :     template <class _Ty0>
; 1317 :     friend class weak_ptr; // specifically, weak_ptr::lock()
; 1318 : 
; 1319 :     template <class _Ty2>
; 1320 :     bool _Construct_from_weak(const weak_ptr<_Ty2>& _Other) noexcept {
; 1321 :         // implement shared_ptr's ctor from weak_ptr, and weak_ptr::lock()
; 1322 :         if (_Other._Rep && _Other._Rep->_Incref_nz()) {
; 1323 :             _Ptr = _Other._Ptr;
; 1324 :             _Rep = _Other._Rep;
; 1325 :             return true;
; 1326 :         }
; 1327 : 
; 1328 :         return false;
; 1329 :     }
; 1330 : 
; 1331 :     void _Incref() const noexcept {
; 1332 :         if (_Rep) {
; 1333 :             _Rep->_Incref();
; 1334 :         }
; 1335 :     }
; 1336 : 
; 1337 :     void _Decref() noexcept { // decrement reference count
; 1338 :         if (_Rep) {
; 1339 :             _Rep->_Decref();
; 1340 :         }
; 1341 :     }
; 1342 : 
; 1343 :     void _Swap(_Ptr_base& _Right) noexcept { // swap pointers
; 1344 :         _STD swap(_Ptr, _Right._Ptr);
; 1345 :         _STD swap(_Rep, _Right._Rep);
; 1346 :     }
; 1347 : 
; 1348 :     template <class _Ty2>
; 1349 :     void _Weakly_construct_from(const _Ptr_base<_Ty2>& _Other) noexcept { // implement weak_ptr's ctors
; 1350 :         if (_Other._Rep) {
; 1351 :             _Ptr = _Other._Ptr;
; 1352 :             _Rep = _Other._Rep;
; 1353 :             _Rep->_Incwref();
; 1354 :         } else {
; 1355 :             _STL_INTERNAL_CHECK(!_Ptr && !_Rep);
; 1356 :         }
; 1357 :     }
; 1358 : 
; 1359 :     template <class _Ty2>
; 1360 :     void _Weakly_convert_lvalue_avoiding_expired_conversions(const _Ptr_base<_Ty2>& _Other) noexcept {
; 1361 :         // implement weak_ptr's copy converting ctor
; 1362 :         if (_Other._Rep) {
; 1363 :             _Rep = _Other._Rep; // always share ownership
; 1364 :             _Rep->_Incwref();
; 1365 : 
; 1366 :             if (_Rep->_Incref_nz()) {
; 1367 :                 _Ptr = _Other._Ptr; // keep resource alive during conversion, handling virtual inheritance
; 1368 :                 _Rep->_Decref();
; 1369 :             } else {
; 1370 :                 _STL_INTERNAL_CHECK(!_Ptr);
; 1371 :             }
; 1372 :         } else {
; 1373 :             _STL_INTERNAL_CHECK(!_Ptr && !_Rep);
; 1374 :         }
; 1375 :     }
; 1376 : 
; 1377 :     template <class _Ty2>
; 1378 :     void _Weakly_convert_rvalue_avoiding_expired_conversions(_Ptr_base<_Ty2>&& _Other) noexcept {
; 1379 :         // implement weak_ptr's move converting ctor
; 1380 :         _Rep        = _Other._Rep; // always transfer ownership
; 1381 :         _Other._Rep = nullptr;
; 1382 : 
; 1383 :         if (_Rep && _Rep->_Incref_nz()) {
; 1384 :             _Ptr = _Other._Ptr; // keep resource alive during conversion, handling virtual inheritance
; 1385 :             _Rep->_Decref();
; 1386 :         } else {
; 1387 :             _STL_INTERNAL_CHECK(!_Ptr);
; 1388 :         }
; 1389 : 
; 1390 :         _Other._Ptr = nullptr;
; 1391 :     }
; 1392 : 
; 1393 :     void _Incwref() const noexcept {
; 1394 :         if (_Rep) {
; 1395 :             _Rep->_Incwref();
; 1396 :         }
; 1397 :     }
; 1398 : 
; 1399 :     void _Decwref() noexcept { // decrement weak reference count
; 1400 :         if (_Rep) {
; 1401 :             _Rep->_Decwref();
; 1402 :         }
; 1403 :     }
; 1404 : 
; 1405 : private:
; 1406 :     element_type* _Ptr{nullptr};

	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax], 0

; 1407 :     _Ref_count_base* _Rep{nullptr};

	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0

; 1274 :     constexpr _Ptr_base() noexcept = default;

	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$_Ptr_base@VMaterial@@@std@@IEAA@XZ ENDP		; std::_Ptr_base<Material>::_Ptr_base<Material>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Decwref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Decwref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decwref, COMDAT

; 1114 :     void _Decwref() noexcept { // decrement weak reference count

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1115 :         if (_MT_DECR(_Weaks) == 0) {

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 12
	mov	ecx, -1
	lock xadd DWORD PTR [rax], ecx
	dec	ecx
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN2@Decwref

; 1116 :             _Delete_this();

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	call	QWORD PTR [rax+8]
$LN2@Decwref:

; 1117 :         }
; 1118 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Decwref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decwref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Decref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Decref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Decref, COMDAT

; 1107 :     void _Decref() noexcept { // decrement use count

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1108 :         if (_MT_DECR(_Uses) == 0) {

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	ecx, -1
	lock xadd DWORD PTR [rax], ecx
	dec	ecx
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN2@Decref

; 1109 :             _Destroy();

	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	call	QWORD PTR [rax]

; 1110 :             _Decwref();

	mov	rcx, QWORD PTR this$[rbp]
	call	?_Decwref@_Ref_count_base@std@@QEAAXXZ	; std::_Ref_count_base::_Decwref
$LN2@Decref:

; 1111 :         }
; 1112 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Decref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?_Incref@_Ref_count_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Incref@_Ref_count_base@std@@QEAAXXZ PROC		; std::_Ref_count_base::_Incref, COMDAT

; 1099 :     void _Incref() noexcept { // increment use count

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__F82802EA_memory
	call	__CheckForDebuggerJustMyCode

; 1100 :         _MT_INCR(_Uses);

	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	lock inc DWORD PTR [rax]

; 1101 :     }

	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_Incref@_Ref_count_base@std@@QEAAXXZ ENDP		; std::_Ref_count_base::_Incref
_TEXT	ENDS
END
